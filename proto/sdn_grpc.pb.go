// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/sdn.proto

package sdn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlowOperation_AddFlow_FullMethodName       = "/sdn.FlowOperation/AddFlow"
	FlowOperation_SendPacketOut_FullMethodName = "/sdn.FlowOperation/SendPacketOut"
)

// FlowOperationClient is the client API for FlowOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Flow Operation Service
type FlowOperationClient interface {
	AddFlow(ctx context.Context, in *FlowAddRequest, opts ...grpc.CallOption) (*FlowAddResponse, error)
	SendPacketOut(ctx context.Context, in *PacketOutRequest, opts ...grpc.CallOption) (*PacketOutResponse, error)
}

type flowOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowOperationClient(cc grpc.ClientConnInterface) FlowOperationClient {
	return &flowOperationClient{cc}
}

func (c *flowOperationClient) AddFlow(ctx context.Context, in *FlowAddRequest, opts ...grpc.CallOption) (*FlowAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlowAddResponse)
	err := c.cc.Invoke(ctx, FlowOperation_AddFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowOperationClient) SendPacketOut(ctx context.Context, in *PacketOutRequest, opts ...grpc.CallOption) (*PacketOutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PacketOutResponse)
	err := c.cc.Invoke(ctx, FlowOperation_SendPacketOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowOperationServer is the server API for FlowOperation service.
// All implementations must embed UnimplementedFlowOperationServer
// for forward compatibility.
//
// Flow Operation Service
type FlowOperationServer interface {
	AddFlow(context.Context, *FlowAddRequest) (*FlowAddResponse, error)
	SendPacketOut(context.Context, *PacketOutRequest) (*PacketOutResponse, error)
	mustEmbedUnimplementedFlowOperationServer()
}

// UnimplementedFlowOperationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlowOperationServer struct{}

func (UnimplementedFlowOperationServer) AddFlow(context.Context, *FlowAddRequest) (*FlowAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFlow not implemented")
}
func (UnimplementedFlowOperationServer) SendPacketOut(context.Context, *PacketOutRequest) (*PacketOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPacketOut not implemented")
}
func (UnimplementedFlowOperationServer) mustEmbedUnimplementedFlowOperationServer() {}
func (UnimplementedFlowOperationServer) testEmbeddedByValue()                       {}

// UnsafeFlowOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowOperationServer will
// result in compilation errors.
type UnsafeFlowOperationServer interface {
	mustEmbedUnimplementedFlowOperationServer()
}

func RegisterFlowOperationServer(s grpc.ServiceRegistrar, srv FlowOperationServer) {
	// If the following call pancis, it indicates UnimplementedFlowOperationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlowOperation_ServiceDesc, srv)
}

func _FlowOperation_AddFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowOperationServer).AddFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowOperation_AddFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowOperationServer).AddFlow(ctx, req.(*FlowAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowOperation_SendPacketOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowOperationServer).SendPacketOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowOperation_SendPacketOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowOperationServer).SendPacketOut(ctx, req.(*PacketOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowOperation_ServiceDesc is the grpc.ServiceDesc for FlowOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdn.FlowOperation",
	HandlerType: (*FlowOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFlow",
			Handler:    _FlowOperation_AddFlow_Handler,
		},
		{
			MethodName: "SendPacketOut",
			Handler:    _FlowOperation_SendPacketOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sdn.proto",
}

const (
	PacketHandler_HandlePacketIn_FullMethodName = "/sdn.PacketHandler/HandlePacketIn"
)

// PacketHandlerClient is the client API for PacketHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Packet Handler Service
type PacketHandlerClient interface {
	HandlePacketIn(ctx context.Context, in *PacketInRequest, opts ...grpc.CallOption) (*PacketInResponse, error)
}

type packetHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketHandlerClient(cc grpc.ClientConnInterface) PacketHandlerClient {
	return &packetHandlerClient{cc}
}

func (c *packetHandlerClient) HandlePacketIn(ctx context.Context, in *PacketInRequest, opts ...grpc.CallOption) (*PacketInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PacketInResponse)
	err := c.cc.Invoke(ctx, PacketHandler_HandlePacketIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketHandlerServer is the server API for PacketHandler service.
// All implementations must embed UnimplementedPacketHandlerServer
// for forward compatibility.
//
// Packet Handler Service
type PacketHandlerServer interface {
	HandlePacketIn(context.Context, *PacketInRequest) (*PacketInResponse, error)
	mustEmbedUnimplementedPacketHandlerServer()
}

// UnimplementedPacketHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPacketHandlerServer struct{}

func (UnimplementedPacketHandlerServer) HandlePacketIn(context.Context, *PacketInRequest) (*PacketInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePacketIn not implemented")
}
func (UnimplementedPacketHandlerServer) mustEmbedUnimplementedPacketHandlerServer() {}
func (UnimplementedPacketHandlerServer) testEmbeddedByValue()                       {}

// UnsafePacketHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketHandlerServer will
// result in compilation errors.
type UnsafePacketHandlerServer interface {
	mustEmbedUnimplementedPacketHandlerServer()
}

func RegisterPacketHandlerServer(s grpc.ServiceRegistrar, srv PacketHandlerServer) {
	// If the following call pancis, it indicates UnimplementedPacketHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PacketHandler_ServiceDesc, srv)
}

func _PacketHandler_HandlePacketIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketHandlerServer).HandlePacketIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PacketHandler_HandlePacketIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketHandlerServer).HandlePacketIn(ctx, req.(*PacketInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PacketHandler_ServiceDesc is the grpc.ServiceDesc for PacketHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdn.PacketHandler",
	HandlerType: (*PacketHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandlePacketIn",
			Handler:    _PacketHandler_HandlePacketIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sdn.proto",
}
